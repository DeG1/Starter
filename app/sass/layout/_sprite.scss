// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$adobe-name: 'adobe';
$adobe-x: 0px;
$adobe-y: 130px;
$adobe-offset-x: 0px;
$adobe-offset-y: -130px;
$adobe-width: 38px;
$adobe-height: 34px;
$adobe-total-width: 180px;
$adobe-total-height: 164px;
$adobe-image: 'sprite.png';
$adobe: (0px, 130px, 0px, -130px, 38px, 34px, 180px, 164px, 'sprite.png', 'adobe', );
$facebook-name: 'facebook';
$facebook-x: 0px;
$facebook-y: 92px;
$facebook-offset-x: 0px;
$facebook-offset-y: -92px;
$facebook-width: 80px;
$facebook-height: 18px;
$facebook-total-width: 180px;
$facebook-total-height: 164px;
$facebook-image: 'sprite.png';
$facebook: (0px, 92px, 0px, -92px, 80px, 18px, 180px, 164px, 'sprite.png', 'facebook', );
$google-name: 'google';
$google-x: 0px;
$google-y: 0px;
$google-offset-x: 0px;
$google-offset-y: 0px;
$google-width: 80px;
$google-height: 28px;
$google-total-width: 180px;
$google-total-height: 164px;
$google-image: 'sprite.png';
$google: (0px, 0px, 0px, 0px, 80px, 28px, 180px, 164px, 'sprite.png', 'google', );
$nike-name: 'nike';
$nike-x: 100px;
$nike-y: 44px;
$nike-offset-x: -100px;
$nike-offset-y: -44px;
$nike-width: 70px;
$nike-height: 26px;
$nike-total-width: 180px;
$nike-total-height: 164px;
$nike-image: 'sprite.png';
$nike: (100px, 44px, -100px, -44px, 70px, 26px, 180px, 164px, 'sprite.png', 'nike', );
$slack-name: 'slack';
$slack-x: 0px;
$slack-y: 48px;
$slack-offset-x: 0px;
$slack-offset-y: -48px;
$slack-width: 80px;
$slack-height: 24px;
$slack-total-width: 180px;
$slack-total-height: 164px;
$slack-image: 'sprite.png';
$slack: (0px, 48px, 0px, -48px, 80px, 24px, 180px, 164px, 'sprite.png', 'slack', );
$spotify-name: 'spotify';
$spotify-x: 100px;
$spotify-y: 0px;
$spotify-offset-x: -100px;
$spotify-offset-y: 0px;
$spotify-width: 80px;
$spotify-height: 24px;
$spotify-total-width: 180px;
$spotify-total-height: 164px;
$spotify-image: 'sprite.png';
$spotify: (100px, 0px, -100px, 0px, 80px, 24px, 180px, 164px, 'sprite.png', 'spotify', );
$spritesheet-width: 180px;
$spritesheet-height: 164px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($adobe, $facebook, $google, $nike, $slack, $spotify, );
$spritesheet: (180px, 164px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../../sass/layout/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
